# Generated by Django 5.2.5 on 2025-08-27 18:24

import django.core.validators
import django.db.models.deletion
import services.models
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('partner', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('icon_class', models.CharField(blank=True, max_length=100, null=True)),
                ('page_url', models.CharField(blank=True, max_length=255, null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('short_description', models.TextField(blank=True, default='')),
                ('long_description', models.TextField(blank=True, default='')),
                ('icon', models.ImageField(blank=True, null=True, upload_to='service_icons/')),
                ('hero_image', models.ImageField(blank=True, null=True, upload_to='service_hero/')),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('is_featured', models.BooleanField(db_index=True, default=False)),
                ('available_for', models.CharField(choices=[('both', 'Both'), ('user', 'User only'), ('partner', 'Partner only')], default='both', max_length=10)),
                ('price_user', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('price_partner_default', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='RequiredDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the document (e.g., Passport, ID Card)', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Optional: further details or requirements for the document.')),
                ('is_mandatory', models.BooleanField(default=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='required_documents', to='services.service')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DynamicServiceField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Internal name for the field (e.g., 'pan_number')", max_length=255)),
                ('label', models.CharField(help_text="User-facing label (e.g., 'PAN Number')", max_length=255)),
                ('field_type', models.CharField(choices=[('text', 'Text Input'), ('textarea', 'Text Area'), ('number', 'Number Input')], default='text', max_length=20)),
                ('is_mandatory', models.BooleanField(default=False)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dynamic_fields', to='services.service')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('icon_class', models.CharField(blank=True, help_text='Font Awesome/BoxIcon class for icon display', max_length=100, null=True)),
                ('order', models.PositiveIntegerField(default=0, help_text='Defines order in navbar')),
                ('slug', models.SlugField(blank=True, help_text='Optional category slug', max_length=255, null=True)),
            ],
            options={
                'ordering': ['order', 'name'],
                'indexes': [models.Index(fields=['order'], name='services_se_order_f9dc0e_idx')],
            },
        ),
        migrations.AddField(
            model_name='service',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='services', to='services.servicecategory'),
        ),
        migrations.CreateModel(
            name='ServiceNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField(help_text='The content of the note. You can use basic HTML like <b> for bold.')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order in which the notes will appear.')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='services.service')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ServiceOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('additional_info', models.TextField(blank=True)),
                ('invoice', models.FileField(blank=True, null=True, upload_to=services.models.invoice_upload_path)),
                ('returned_document', models.FileField(blank=True, null=True, upload_to='returned_docs/')),
                ('remarks', models.TextField(blank=True, help_text='Admin remarks for the returned document or order completion.')),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='paid', max_length=20)),
                ('payment_method', models.CharField(choices=[('not_paid', 'Not Paid'), ('wallet', 'Wallet'), ('gateway', 'Payment Gateway')], default='not_paid', max_length=20)),
                ('progress_status', models.CharField(choices=[('placed', 'Order Placed'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='placed', max_length=20)),
                ('price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('external_order_id', models.CharField(blank=True, help_text='Reference from payment gateway (e.g. Razorpay order_xxx)', max_length=100, null=True, unique=True)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='partner.customer')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='services.service')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_name', models.CharField(help_text="The name of the document requirement, e.g., 'Passport'", max_length=255)),
                ('file', models.FileField(upload_to=services.models.order_document_upload_path)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_documents', to='services.serviceorder')),
            ],
        ),
        migrations.CreateModel(
            name='DynamicFieldResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, help_text="The user's submitted value for the field.")),
                ('field', models.ForeignKey(help_text='The dynamic field (question) this response is for.', on_delete=django.db.models.deletion.CASCADE, to='services.dynamicservicefield')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dynamic_field_responses', to='services.serviceorder')),
            ],
            options={
                'ordering': ['field__id'],
            },
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['slug'], name='services_se_slug_4657d0_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['is_active'], name='services_se_is_acti_91b7ea_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceorder',
            index=models.Index(fields=['payment_status'], name='services_se_payment_19894b_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceorder',
            index=models.Index(fields=['progress_status'], name='services_se_progres_cf47a7_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceorder',
            index=models.Index(fields=['created_at'], name='services_se_created_c72088_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dynamicfieldresponse',
            unique_together={('order', 'field')},
        ),
    ]
